generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider   = "node ../../node_modules/.bin/prisma-nestjs-graphql"
  output     = "../src/@generated"
  emitSingle = true
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String
  firstName       String
  lastName        String
  avatar          String?
  phoneNumber     String
  showPhoneNumber Boolean    @default(true)
  role            UserRole
  status          UserStatus @default(active)
  googleId        String?
  facebookId      String?
  city            City?      @relation(fields: [cityId], references: [id])
  cityId          String?
  products        Product[]
  favorites       Favorite[]
  likes           Like[]
  followedBy      User[]     @relation("UserFollows", references: [id])
  following       User[]     @relation("UserFollows", references: [id])
  isTrash         Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Product {
  id             String               @id @default(cuid())
  title          String
  desc           String
  price          Float
  size           ProductSize
  season         ProductSeason
  dateOfPurchase DateTime
  viewsNumber    Int
  images         ProductImage[]
  city           City                 @relation(fields: [cityId], references: [id])
  cityId         String
  category       Category             @relation(fields: [categoryId], references: [id])
  categoryId     String
  brand          Brand                @relation(fields: [brandId], references: [id])
  brandId        String
  author         User?                @relation(fields: [authorId], references: [id])
  authorId       String?
  favorites      Favorite[]
  likes          Like[]
  publishStatus  ProductPublishStatus
  productStatus  ProductStatus
  isTrash        Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  title     String
  desc      String
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  isTrash   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  isTrash   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model City {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  users     User[]
  isTrash   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  admin
  editor
  visitor
}

enum UserStatus {
  blocked
  active
}

enum ProductPublishStatus {
  published
  draft
}

enum ProductStatus {
  new_with_tags
  new
  like_new
  medium
  normal
  low
  degraded
}

enum ProductSeason {
  spring
  summer
  fall
  winter
}

enum ProductSize {
  xs
  s
  m
  l
  xl
  xxl
  xxxl
  xxxxl
}
