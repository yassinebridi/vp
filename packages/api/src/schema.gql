# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthUser1 {
  """JWT access token"""
  accessToken: String!
  user: User1!
}

type BrandCountAggregate1 {
  id: Int
  name: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type BrandMaxAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BrandMinAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Brand1 {
  id: ID!
  name: String!
  products: [Product1!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryCountAggregate1 {
  id: Int
  name: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type CategoryMaxAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryMinAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Category1 {
  id: ID!
  name: String!
  products: [Product1!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CityCountAggregate1 {
  id: Int
  name: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type CityMaxAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CityMinAggregate1 {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type City1 {
  id: ID!
  name: String!
  products: [Product1!]
  users: [User1!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FavoriteCountAggregate1 {
  id: Int
  userId: Int
  productId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type FavoriteMaxAggregate1 {
  id: String
  userId: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type FavoriteMinAggregate1 {
  id: String
  userId: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Favorite1 {
  id: ID!
  user: User1
  userId: String
  product: Product1
  productId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeCountAggregate1 {
  id: Int
  userId: Int
  productId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type LikeMaxAggregate1 {
  id: String
  userId: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type LikeMinAggregate1 {
  id: String
  userId: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Like1 {
  id: ID!
  user: User1
  userId: String
  product: Product1
  productId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductAvgAggregate1 {
  price: Float!
  viewsNumber: Float!
}

type ProductCountAggregate1 {
  id: Int
  title: Int
  desc: Int
  price: Int!
  size: Int
  season: Int
  dateOfPurchase: Int
  viewsNumber: Int!
  cityId: Int
  categoryId: Int
  brandId: Int
  authorId: Int
  publishStatus: Int
  productStatus: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type ProductMaxAggregate1 {
  id: String
  title: String
  desc: String
  price: Float!
  size: ProductSize
  season: ProductSeason
  dateOfPurchase: DateTime
  viewsNumber: Int!
  cityId: String
  categoryId: String
  brandId: String
  authorId: String
  publishStatus: ProductPublishStatus
  productStatus: ProductStatus
  createdAt: DateTime
  updatedAt: DateTime
}

enum ProductSize {
  xs
  s
  m
  l
  xl
  xxl
  xxxl
  xxxxl
}

enum ProductSeason {
  spring
  summer
  fall
  winter
}

enum ProductPublishStatus {
  published
  draft
  trash
}

enum ProductStatus {
  new_with_tags
  new
  like_new
  medium
  normal
  low
  degraded
}

type ProductMinAggregate1 {
  id: String
  title: String
  desc: String
  price: Float!
  size: ProductSize
  season: ProductSeason
  dateOfPurchase: DateTime
  viewsNumber: Int!
  cityId: String
  categoryId: String
  brandId: String
  authorId: String
  publishStatus: ProductPublishStatus
  productStatus: ProductStatus
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductSumAggregate1 {
  price: Float!
  viewsNumber: Int!
}

type Product1 {
  id: ID!
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  images: [ProductImage1!]
  city: City1!
  cityId: String!
  category: Category1!
  categoryId: String!
  brand: Brand1!
  brandId: String!
  author: User1
  authorId: String
  favorites: [Favorite1!]
  likes: [Like1!]
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductImageCountAggregate1 {
  id: Int
  title: Int
  desc: Int
  url: Int
  productId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type ProductImageMaxAggregate1 {
  id: String
  title: String
  desc: String
  url: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductImageMinAggregate1 {
  id: String
  title: String
  desc: String
  url: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductImage1 {
  id: ID!
  title: String!
  desc: String!
  url: String!
  product: Product1
  productId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCountAggregate1 {
  id: Int
  email: Int
  password: Int
  firstName: Int
  lastName: Int
  avatar: Int
  phoneNumber: Int
  showPhoneNumber: Int
  role: Int
  status: Int
  googleId: Int
  facebookId: Int
  cityId: Int
  createdAt: Int
  updatedAt: Int
  _all: Int!
}

type UserMaxAggregate1 {
  id: String
  email: String
  password: String
  firstName: String
  lastName: String
  avatar: String
  phoneNumber: String
  showPhoneNumber: Boolean
  role: UserRole
  status: UserStatus
  googleId: String
  facebookId: String
  cityId: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserRole {
  admin
  editor
  visitor
}

enum UserStatus {
  blocked
  active
}

type UserMinAggregate1 {
  id: String
  email: String
  password: String
  firstName: String
  lastName: String
  avatar: String
  phoneNumber: String
  showPhoneNumber: Boolean
  role: UserRole
  status: UserStatus
  googleId: String
  facebookId: String
  cityId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type User1 {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean!
  role: UserRole!
  status: UserStatus!
  googleId: String
  facebookId: String
  city: City1
  cityId: String
  products: [Product1!]
  favorites: [Favorite1!]
  likes: [Like1!]
  followedBy: [User1!]
  following: [User1!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Query {
  getAllCities(where: CityWhereInput1, orderBy: [CityOrderByInput1!], cursor: CityWhereUniqueInput1, take: Int, skip: Int, distinct: [CityScalarFieldEnum!]): [City1!]!
  getOneCity(where: CityWhereUniqueInput1!): City1!
  getAllBrands(where: BrandWhereInput1, orderBy: [BrandOrderByInput1!], cursor: BrandWhereUniqueInput1, take: Int, skip: Int, distinct: [BrandScalarFieldEnum!]): [Brand1!]!
  getOneBrand(where: BrandWhereUniqueInput1!): Brand1!
  getAllCategories(where: CategoryWhereInput1, orderBy: [CategoryOrderByInput1!], cursor: CategoryWhereUniqueInput1, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): [Category1!]!
  getOneCategory(where: CategoryWhereUniqueInput1!): Category1!
  me: User1!
  getAllUsers(where: UserWhereInput1, orderBy: [UserOrderByInput1!], cursor: UserWhereUniqueInput1, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User1!]!
  getOneUser(where: UserWhereUniqueInput1!): User1!
  getAllProducts(where: ProductWhereInput1, orderBy: [ProductOrderByInput1!], cursor: ProductWhereUniqueInput1, take: Int, skip: Int, distinct: [ProductScalarFieldEnum!]): [Product1!]!
  getOneProduct(where: ProductWhereUniqueInput1!): Product1!
}

input CityWhereInput1 {
  AND: [CityWhereInput1!]
  OR: [CityWhereInput1!]
  NOT: [CityWhereInput1!]
  id: StringFilter1
  name: StringFilter1
  products: ProductListRelationFilter1
  users: UserListRelationFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input StringFilter1 {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter1
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter1 {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter1
}

input ProductListRelationFilter1 {
  every: ProductWhereInput1
  some: ProductWhereInput1
  none: ProductWhereInput1
}

input ProductWhereInput1 {
  AND: [ProductWhereInput1!]
  OR: [ProductWhereInput1!]
  NOT: [ProductWhereInput1!]
  id: StringFilter1
  title: StringFilter1
  desc: StringFilter1
  price: FloatFilter1
  size: EnumProductSizeFilter1
  season: EnumProductSeasonFilter1
  dateOfPurchase: DateTimeFilter1
  viewsNumber: IntFilter1
  images: ProductImageListRelationFilter1
  city: CityRelationFilter1
  cityId: StringFilter1
  category: CategoryRelationFilter1
  categoryId: StringFilter1
  brand: BrandRelationFilter1
  brandId: StringFilter1
  author: UserRelationFilter1
  authorId: StringNullableFilter1
  favorites: FavoriteListRelationFilter1
  likes: LikeListRelationFilter1
  publishStatus: EnumProductPublishStatusFilter1
  productStatus: EnumProductStatusFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input FloatFilter1 {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter1
}

input NestedFloatFilter1 {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter1
}

input EnumProductSizeFilter1 {
  equals: ProductSize
  in: [ProductSize!]
  notIn: [ProductSize!]
  not: NestedEnumProductSizeFilter1
}

input NestedEnumProductSizeFilter1 {
  equals: ProductSize
  in: [ProductSize!]
  notIn: [ProductSize!]
  not: NestedEnumProductSizeFilter1
}

input EnumProductSeasonFilter1 {
  equals: ProductSeason
  in: [ProductSeason!]
  notIn: [ProductSeason!]
  not: NestedEnumProductSeasonFilter1
}

input NestedEnumProductSeasonFilter1 {
  equals: ProductSeason
  in: [ProductSeason!]
  notIn: [ProductSeason!]
  not: NestedEnumProductSeasonFilter1
}

input DateTimeFilter1 {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter1
}

input NestedDateTimeFilter1 {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter1
}

input IntFilter1 {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter1
}

input NestedIntFilter1 {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter1
}

input ProductImageListRelationFilter1 {
  every: ProductImageWhereInput1
  some: ProductImageWhereInput1
  none: ProductImageWhereInput1
}

input ProductImageWhereInput1 {
  AND: [ProductImageWhereInput1!]
  OR: [ProductImageWhereInput1!]
  NOT: [ProductImageWhereInput1!]
  id: StringFilter1
  title: StringFilter1
  desc: StringFilter1
  url: StringFilter1
  product: ProductRelationFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input ProductRelationFilter1 {
  is: ProductWhereInput1
  isNot: ProductWhereInput1
}

input StringNullableFilter1 {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter1
}

input NestedStringNullableFilter1 {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter1
}

input CityRelationFilter1 {
  is: CityWhereInput1
  isNot: CityWhereInput1
}

input CategoryRelationFilter1 {
  is: CategoryWhereInput1
  isNot: CategoryWhereInput1
}

input CategoryWhereInput1 {
  AND: [CategoryWhereInput1!]
  OR: [CategoryWhereInput1!]
  NOT: [CategoryWhereInput1!]
  id: StringFilter1
  name: StringFilter1
  products: ProductListRelationFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input BrandRelationFilter1 {
  is: BrandWhereInput1
  isNot: BrandWhereInput1
}

input BrandWhereInput1 {
  AND: [BrandWhereInput1!]
  OR: [BrandWhereInput1!]
  NOT: [BrandWhereInput1!]
  id: StringFilter1
  name: StringFilter1
  products: ProductListRelationFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input UserRelationFilter1 {
  is: UserWhereInput1
  isNot: UserWhereInput1
}

input UserWhereInput1 {
  AND: [UserWhereInput1!]
  OR: [UserWhereInput1!]
  NOT: [UserWhereInput1!]
  id: StringFilter1
  email: StringFilter1
  password: StringFilter1
  firstName: StringFilter1
  lastName: StringFilter1
  avatar: StringNullableFilter1
  phoneNumber: StringFilter1
  showPhoneNumber: BoolFilter1
  role: EnumUserRoleFilter1
  status: EnumUserStatusFilter1
  googleId: StringNullableFilter1
  facebookId: StringNullableFilter1
  city: CityRelationFilter1
  cityId: StringNullableFilter1
  products: ProductListRelationFilter1
  favorites: FavoriteListRelationFilter1
  likes: LikeListRelationFilter1
  followedBy: UserListRelationFilter1
  following: UserListRelationFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input BoolFilter1 {
  equals: Boolean
  not: NestedBoolFilter1
}

input NestedBoolFilter1 {
  equals: Boolean
  not: NestedBoolFilter1
}

input EnumUserRoleFilter1 {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter1
}

input NestedEnumUserRoleFilter1 {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter1
}

input EnumUserStatusFilter1 {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter1
}

input NestedEnumUserStatusFilter1 {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter1
}

input FavoriteListRelationFilter1 {
  every: FavoriteWhereInput1
  some: FavoriteWhereInput1
  none: FavoriteWhereInput1
}

input FavoriteWhereInput1 {
  AND: [FavoriteWhereInput1!]
  OR: [FavoriteWhereInput1!]
  NOT: [FavoriteWhereInput1!]
  id: StringFilter1
  user: UserRelationFilter1
  userId: StringNullableFilter1
  product: ProductRelationFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input LikeListRelationFilter1 {
  every: LikeWhereInput1
  some: LikeWhereInput1
  none: LikeWhereInput1
}

input LikeWhereInput1 {
  AND: [LikeWhereInput1!]
  OR: [LikeWhereInput1!]
  NOT: [LikeWhereInput1!]
  id: StringFilter1
  user: UserRelationFilter1
  userId: StringNullableFilter1
  product: ProductRelationFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input UserListRelationFilter1 {
  every: UserWhereInput1
  some: UserWhereInput1
  none: UserWhereInput1
}

input EnumProductPublishStatusFilter1 {
  equals: ProductPublishStatus
  in: [ProductPublishStatus!]
  notIn: [ProductPublishStatus!]
  not: NestedEnumProductPublishStatusFilter1
}

input NestedEnumProductPublishStatusFilter1 {
  equals: ProductPublishStatus
  in: [ProductPublishStatus!]
  notIn: [ProductPublishStatus!]
  not: NestedEnumProductPublishStatusFilter1
}

input EnumProductStatusFilter1 {
  equals: ProductStatus
  in: [ProductStatus!]
  notIn: [ProductStatus!]
  not: NestedEnumProductStatusFilter1
}

input NestedEnumProductStatusFilter1 {
  equals: ProductStatus
  in: [ProductStatus!]
  notIn: [ProductStatus!]
  not: NestedEnumProductStatusFilter1
}

input CityOrderByInput1 {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input CityWhereUniqueInput1 {
  id: String
}

enum CityScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input BrandOrderByInput1 {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input BrandWhereUniqueInput1 {
  id: String
}

enum BrandScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input CategoryOrderByInput1 {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CategoryWhereUniqueInput1 {
  id: String
}

enum CategoryScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input UserOrderByInput1 {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  avatar: SortOrder
  phoneNumber: SortOrder
  showPhoneNumber: SortOrder
  role: SortOrder
  status: SortOrder
  googleId: SortOrder
  facebookId: SortOrder
  cityId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserWhereUniqueInput1 {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  email
  password
  firstName
  lastName
  avatar
  phoneNumber
  showPhoneNumber
  role
  status
  googleId
  facebookId
  cityId
  createdAt
  updatedAt
}

input ProductOrderByInput1 {
  id: SortOrder
  title: SortOrder
  desc: SortOrder
  price: SortOrder
  size: SortOrder
  season: SortOrder
  dateOfPurchase: SortOrder
  viewsNumber: SortOrder
  cityId: SortOrder
  categoryId: SortOrder
  brandId: SortOrder
  authorId: SortOrder
  publishStatus: SortOrder
  productStatus: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProductWhereUniqueInput1 {
  id: String
}

enum ProductScalarFieldEnum {
  id
  title
  desc
  price
  size
  season
  dateOfPurchase
  viewsNumber
  cityId
  categoryId
  brandId
  authorId
  publishStatus
  productStatus
  createdAt
  updatedAt
}

type Mutation {
  createCity(createCityInput: CityCreateInput1!): Boolean!
  updateCity(data: CityUpdateInput1!, where: CityWhereUniqueInput1!): Boolean!
  removeCity(whereCityInput: CityWhereUniqueInput1!): Boolean!
  bulkCities(number: Int!): Boolean!
  bulkRemoveCities: Boolean!
  createBrand(createBrandInput: BrandCreateInput1!): Boolean!
  updateBrand(data: BrandUpdateInput1!, where: BrandWhereUniqueInput1!): Boolean!
  removeBrand(whereBrandInput: BrandWhereUniqueInput1!): Boolean!
  bulkBrands(number: Int!): Boolean!
  bulkRemoveBrands: Boolean!
  createCategory(createCategoryInput: CategoryCreateInput1!): Boolean!
  updateCategory(data: CategoryUpdateInput1!, where: CategoryWhereUniqueInput1!): Boolean!
  removeCategory(whereCategoryInput: CategoryWhereUniqueInput1!): Boolean!
  bulkCategories(number: Int!): Boolean!
  bulkRemoveCategories: Boolean!
  register(data: RegisterInput1!): AuthUser1!
  login(data: LoginInput1!): AuthUser1!
  logout: Boolean!
  searchUsers(where: UserWhereInput1, orderBy: [UserOrderByInput1!], cursor: UserWhereUniqueInput1, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User1!]!
  deleteUser(whereUserInput: UserWhereUniqueInput1!): Boolean!
  updateUser(updateUserInput: UpdateUserInput1!): Boolean!
  changePassword(data: ChangePasswordInput1!): User1!
  createProduct(createProductInput: ProductCreateInput1!): Boolean!
  updateProduct(data: ProductUpdateInput1!, where: ProductWhereUniqueInput1!): Boolean!
  removeProduct(whereProductInput: ProductWhereUniqueInput1!): Boolean!
  bulkProducts(number: Int!): Boolean!
  bulkRemoveProducts: Boolean!
}

input CityCreateInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutCityInput1
  users: UserCreateNestedManyWithoutCityInput1
}

input ProductCreateNestedManyWithoutCityInput1 {
  create: [ProductCreateWithoutCityInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutCityInput1!]
  createMany: ProductCreateManyCityInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
}

input ProductCreateWithoutCityInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  category: CategoryCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  favorites: FavoriteCreateNestedManyWithoutProductInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input ProductImageCreateNestedManyWithoutProductInput1 {
  create: [ProductImageCreateWithoutProductInput1!]
  connectOrCreate: [ProductImageCreateOrConnectWithoutProductInput1!]
  createMany: ProductImageCreateManyProductInputEnvelope1
  connect: [ProductImageWhereUniqueInput1!]
}

input ProductImageCreateWithoutProductInput1 {
  id: String
  title: String!
  desc: String!
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductImageCreateOrConnectWithoutProductInput1 {
  where: ProductImageWhereUniqueInput1!
  create: ProductImageCreateWithoutProductInput1!
}

input ProductImageWhereUniqueInput1 {
  id: String
}

input ProductImageCreateManyProductInputEnvelope1 {
  data: [ProductImageCreateManyProductInput1!]!
  skipDuplicates: Boolean
}

input ProductImageCreateManyProductInput1 {
  id: String
  title: String!
  desc: String!
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutProductsInput1 {
  create: CategoryCreateWithoutProductsInput1
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput1
  connect: CategoryWhereUniqueInput1
}

input CategoryCreateWithoutProductsInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryCreateOrConnectWithoutProductsInput1 {
  where: CategoryWhereUniqueInput1!
  create: CategoryCreateWithoutProductsInput1!
}

input BrandCreateNestedOneWithoutProductsInput1 {
  create: BrandCreateWithoutProductsInput1
  connectOrCreate: BrandCreateOrConnectWithoutProductsInput1
  connect: BrandWhereUniqueInput1
}

input BrandCreateWithoutProductsInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input BrandCreateOrConnectWithoutProductsInput1 {
  where: BrandWhereUniqueInput1!
  create: BrandCreateWithoutProductsInput1!
}

input UserCreateNestedOneWithoutProductsInput1 {
  create: UserCreateWithoutProductsInput1
  connectOrCreate: UserCreateOrConnectWithoutProductsInput1
  connect: UserWhereUniqueInput1
}

input UserCreateWithoutProductsInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput1
  favorites: FavoriteCreateNestedManyWithoutUserInput1
  likes: LikeCreateNestedManyWithoutUserInput1
  followedBy: UserCreateNestedManyWithoutFollowingInput1
  following: UserCreateNestedManyWithoutFollowedByInput1
}

input CityCreateNestedOneWithoutUsersInput1 {
  create: CityCreateWithoutUsersInput1
  connectOrCreate: CityCreateOrConnectWithoutUsersInput1
  connect: CityWhereUniqueInput1
}

input CityCreateWithoutUsersInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutCityInput1
}

input CityCreateOrConnectWithoutUsersInput1 {
  where: CityWhereUniqueInput1!
  create: CityCreateWithoutUsersInput1!
}

input FavoriteCreateNestedManyWithoutUserInput1 {
  create: [FavoriteCreateWithoutUserInput1!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutUserInput1!]
  createMany: FavoriteCreateManyUserInputEnvelope1
  connect: [FavoriteWhereUniqueInput1!]
}

input FavoriteCreateWithoutUserInput1 {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  product: ProductCreateNestedOneWithoutFavoritesInput1
}

input ProductCreateNestedOneWithoutFavoritesInput1 {
  create: ProductCreateWithoutFavoritesInput1
  connectOrCreate: ProductCreateOrConnectWithoutFavoritesInput1
  connect: ProductWhereUniqueInput1
}

input ProductCreateWithoutFavoritesInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  category: CategoryCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input CityCreateNestedOneWithoutProductsInput1 {
  create: CityCreateWithoutProductsInput1
  connectOrCreate: CityCreateOrConnectWithoutProductsInput1
  connect: CityWhereUniqueInput1
}

input CityCreateWithoutProductsInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutCityInput1
}

input UserCreateNestedManyWithoutCityInput1 {
  create: [UserCreateWithoutCityInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutCityInput1!]
  createMany: UserCreateManyCityInputEnvelope1
  connect: [UserWhereUniqueInput1!]
}

input UserCreateWithoutCityInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutAuthorInput1
  favorites: FavoriteCreateNestedManyWithoutUserInput1
  likes: LikeCreateNestedManyWithoutUserInput1
  followedBy: UserCreateNestedManyWithoutFollowingInput1
  following: UserCreateNestedManyWithoutFollowedByInput1
}

input ProductCreateNestedManyWithoutAuthorInput1 {
  create: [ProductCreateWithoutAuthorInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutAuthorInput1!]
  createMany: ProductCreateManyAuthorInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
}

input ProductCreateWithoutAuthorInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  category: CategoryCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  favorites: FavoriteCreateNestedManyWithoutProductInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input FavoriteCreateNestedManyWithoutProductInput1 {
  create: [FavoriteCreateWithoutProductInput1!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutProductInput1!]
  createMany: FavoriteCreateManyProductInputEnvelope1
  connect: [FavoriteWhereUniqueInput1!]
}

input FavoriteCreateWithoutProductInput1 {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutFavoritesInput1
}

input UserCreateNestedOneWithoutFavoritesInput1 {
  create: UserCreateWithoutFavoritesInput1
  connectOrCreate: UserCreateOrConnectWithoutFavoritesInput1
  connect: UserWhereUniqueInput1
}

input UserCreateWithoutFavoritesInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput1
  products: ProductCreateNestedManyWithoutAuthorInput1
  likes: LikeCreateNestedManyWithoutUserInput1
  followedBy: UserCreateNestedManyWithoutFollowingInput1
  following: UserCreateNestedManyWithoutFollowedByInput1
}

input LikeCreateNestedManyWithoutUserInput1 {
  create: [LikeCreateWithoutUserInput1!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput1!]
  createMany: LikeCreateManyUserInputEnvelope1
  connect: [LikeWhereUniqueInput1!]
}

input LikeCreateWithoutUserInput1 {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  product: ProductCreateNestedOneWithoutLikesInput1
}

input ProductCreateNestedOneWithoutLikesInput1 {
  create: ProductCreateWithoutLikesInput1
  connectOrCreate: ProductCreateOrConnectWithoutLikesInput1
  connect: ProductWhereUniqueInput1
}

input ProductCreateWithoutLikesInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  category: CategoryCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  favorites: FavoriteCreateNestedManyWithoutProductInput1
}

input ProductCreateOrConnectWithoutLikesInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutLikesInput1!
}

input LikeCreateOrConnectWithoutUserInput1 {
  where: LikeWhereUniqueInput1!
  create: LikeCreateWithoutUserInput1!
}

input LikeWhereUniqueInput1 {
  id: String
}

input LikeCreateManyUserInputEnvelope1 {
  data: [LikeCreateManyUserInput1!]!
  skipDuplicates: Boolean
}

input LikeCreateManyUserInput1 {
  id: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedManyWithoutFollowingInput1 {
  create: [UserCreateWithoutFollowingInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput1!]
  connect: [UserWhereUniqueInput1!]
}

input UserCreateWithoutFollowingInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput1
  products: ProductCreateNestedManyWithoutAuthorInput1
  favorites: FavoriteCreateNestedManyWithoutUserInput1
  likes: LikeCreateNestedManyWithoutUserInput1
  followedBy: UserCreateNestedManyWithoutFollowingInput1
}

input UserCreateOrConnectWithoutFollowingInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutFollowingInput1!
}

input UserCreateNestedManyWithoutFollowedByInput1 {
  create: [UserCreateWithoutFollowedByInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowedByInput1!]
  connect: [UserWhereUniqueInput1!]
}

input UserCreateWithoutFollowedByInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput1
  products: ProductCreateNestedManyWithoutAuthorInput1
  favorites: FavoriteCreateNestedManyWithoutUserInput1
  likes: LikeCreateNestedManyWithoutUserInput1
  following: UserCreateNestedManyWithoutFollowedByInput1
}

input UserCreateOrConnectWithoutFollowedByInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutFollowedByInput1!
}

input UserCreateOrConnectWithoutFavoritesInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutFavoritesInput1!
}

input FavoriteCreateOrConnectWithoutProductInput1 {
  where: FavoriteWhereUniqueInput1!
  create: FavoriteCreateWithoutProductInput1!
}

input FavoriteWhereUniqueInput1 {
  id: String
}

input FavoriteCreateManyProductInputEnvelope1 {
  data: [FavoriteCreateManyProductInput1!]!
  skipDuplicates: Boolean
}

input FavoriteCreateManyProductInput1 {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LikeCreateNestedManyWithoutProductInput1 {
  create: [LikeCreateWithoutProductInput1!]
  connectOrCreate: [LikeCreateOrConnectWithoutProductInput1!]
  createMany: LikeCreateManyProductInputEnvelope1
  connect: [LikeWhereUniqueInput1!]
}

input LikeCreateWithoutProductInput1 {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutLikesInput1
}

input UserCreateNestedOneWithoutLikesInput1 {
  create: UserCreateWithoutLikesInput1
  connectOrCreate: UserCreateOrConnectWithoutLikesInput1
  connect: UserWhereUniqueInput1
}

input UserCreateWithoutLikesInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput1
  products: ProductCreateNestedManyWithoutAuthorInput1
  favorites: FavoriteCreateNestedManyWithoutUserInput1
  followedBy: UserCreateNestedManyWithoutFollowingInput1
  following: UserCreateNestedManyWithoutFollowedByInput1
}

input UserCreateOrConnectWithoutLikesInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutLikesInput1!
}

input LikeCreateOrConnectWithoutProductInput1 {
  where: LikeWhereUniqueInput1!
  create: LikeCreateWithoutProductInput1!
}

input LikeCreateManyProductInputEnvelope1 {
  data: [LikeCreateManyProductInput1!]!
  skipDuplicates: Boolean
}

input LikeCreateManyProductInput1 {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCreateOrConnectWithoutAuthorInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutAuthorInput1!
}

input ProductCreateManyAuthorInputEnvelope1 {
  data: [ProductCreateManyAuthorInput1!]!
  skipDuplicates: Boolean
}

input ProductCreateManyAuthorInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  cityId: String!
  categoryId: String!
  brandId: String!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutCityInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutCityInput1!
}

input UserCreateManyCityInputEnvelope1 {
  data: [UserCreateManyCityInput1!]!
  skipDuplicates: Boolean
}

input UserCreateManyCityInput1 {
  id: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatar: String
  phoneNumber: String!
  showPhoneNumber: Boolean
  role: UserRole!
  status: UserStatus
  googleId: String
  facebookId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CityCreateOrConnectWithoutProductsInput1 {
  where: CityWhereUniqueInput1!
  create: CityCreateWithoutProductsInput1!
}

input ProductCreateOrConnectWithoutFavoritesInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutFavoritesInput1!
}

input FavoriteCreateOrConnectWithoutUserInput1 {
  where: FavoriteWhereUniqueInput1!
  create: FavoriteCreateWithoutUserInput1!
}

input FavoriteCreateManyUserInputEnvelope1 {
  data: [FavoriteCreateManyUserInput1!]!
  skipDuplicates: Boolean
}

input FavoriteCreateManyUserInput1 {
  id: String
  productId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutProductsInput1 {
  where: UserWhereUniqueInput1!
  create: UserCreateWithoutProductsInput1!
}

input ProductCreateOrConnectWithoutCityInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutCityInput1!
}

input ProductCreateManyCityInputEnvelope1 {
  data: [ProductCreateManyCityInput1!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCityInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  categoryId: String!
  brandId: String!
  authorId: String
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input CityUpdateInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  products: ProductUpdateManyWithoutCityInput1
  users: UserUpdateManyWithoutCityInput1
}

input StringFieldUpdateOperationsInput1 {
  set: String
}

input DateTimeFieldUpdateOperationsInput1 {
  set: DateTime
}

input ProductUpdateManyWithoutCityInput1 {
  create: [ProductCreateWithoutCityInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutCityInput1!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCityInput1!]
  createMany: ProductCreateManyCityInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
  set: [ProductWhereUniqueInput1!]
  disconnect: [ProductWhereUniqueInput1!]
  delete: [ProductWhereUniqueInput1!]
  update: [ProductUpdateWithWhereUniqueWithoutCityInput1!]
  updateMany: [ProductUpdateManyWithWhereWithoutCityInput1!]
  deleteMany: [ProductScalarWhereInput1!]
}

input ProductUpsertWithWhereUniqueWithoutCityInput1 {
  where: ProductWhereUniqueInput1!
  update: ProductUpdateWithoutCityInput1!
  create: ProductCreateWithoutCityInput1!
}

input ProductUpdateWithoutCityInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
  likes: LikeUpdateManyWithoutProductInput1
}

input FloatFieldUpdateOperationsInput1 {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input EnumProductSizeFieldUpdateOperationsInput1 {
  set: ProductSize
}

input EnumProductSeasonFieldUpdateOperationsInput1 {
  set: ProductSeason
}

input IntFieldUpdateOperationsInput1 {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input EnumProductPublishStatusFieldUpdateOperationsInput1 {
  set: ProductPublishStatus
}

input EnumProductStatusFieldUpdateOperationsInput1 {
  set: ProductStatus
}

input ProductImageUpdateManyWithoutProductInput1 {
  create: [ProductImageCreateWithoutProductInput1!]
  connectOrCreate: [ProductImageCreateOrConnectWithoutProductInput1!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput1!]
  createMany: ProductImageCreateManyProductInputEnvelope1
  connect: [ProductImageWhereUniqueInput1!]
  set: [ProductImageWhereUniqueInput1!]
  disconnect: [ProductImageWhereUniqueInput1!]
  delete: [ProductImageWhereUniqueInput1!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput1!]
  updateMany: [ProductImageUpdateManyWithWhereWithoutProductInput1!]
  deleteMany: [ProductImageScalarWhereInput1!]
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput1 {
  where: ProductImageWhereUniqueInput1!
  update: ProductImageUpdateWithoutProductInput1!
  create: ProductImageCreateWithoutProductInput1!
}

input ProductImageUpdateWithoutProductInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  url: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput1 {
  where: ProductImageWhereUniqueInput1!
  data: ProductImageUpdateWithoutProductInput1!
}

input ProductImageUpdateManyWithWhereWithoutProductInput1 {
  where: ProductImageScalarWhereInput1!
  data: ProductImageUpdateManyMutationInput1!
}

input ProductImageScalarWhereInput1 {
  AND: [ProductImageScalarWhereInput1!]
  OR: [ProductImageScalarWhereInput1!]
  NOT: [ProductImageScalarWhereInput1!]
  id: StringFilter1
  title: StringFilter1
  desc: StringFilter1
  url: StringFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input ProductImageUpdateManyMutationInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  url: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input CategoryUpdateOneRequiredWithoutProductsInput1 {
  create: CategoryCreateWithoutProductsInput1
  connectOrCreate: CategoryCreateOrConnectWithoutProductsInput1
  upsert: CategoryUpsertWithoutProductsInput1
  connect: CategoryWhereUniqueInput1
  update: CategoryUpdateWithoutProductsInput1
}

input CategoryUpsertWithoutProductsInput1 {
  update: CategoryUpdateWithoutProductsInput1!
  create: CategoryCreateWithoutProductsInput1!
}

input CategoryUpdateWithoutProductsInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input BrandUpdateOneRequiredWithoutProductsInput1 {
  create: BrandCreateWithoutProductsInput1
  connectOrCreate: BrandCreateOrConnectWithoutProductsInput1
  upsert: BrandUpsertWithoutProductsInput1
  connect: BrandWhereUniqueInput1
  update: BrandUpdateWithoutProductsInput1
}

input BrandUpsertWithoutProductsInput1 {
  update: BrandUpdateWithoutProductsInput1!
  create: BrandCreateWithoutProductsInput1!
}

input BrandUpdateWithoutProductsInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input UserUpdateOneWithoutProductsInput1 {
  create: UserCreateWithoutProductsInput1
  connectOrCreate: UserCreateOrConnectWithoutProductsInput1
  upsert: UserUpsertWithoutProductsInput1
  connect: UserWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutProductsInput1
}

input UserUpsertWithoutProductsInput1 {
  update: UserUpdateWithoutProductsInput1!
  create: UserCreateWithoutProductsInput1!
}

input UserUpdateWithoutProductsInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  likes: LikeUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input NullableStringFieldUpdateOperationsInput1 {
  set: String
}

input BoolFieldUpdateOperationsInput1 {
  set: Boolean
}

input EnumUserRoleFieldUpdateOperationsInput1 {
  set: UserRole
}

input EnumUserStatusFieldUpdateOperationsInput1 {
  set: UserStatus
}

input CityUpdateOneWithoutUsersInput1 {
  create: CityCreateWithoutUsersInput1
  connectOrCreate: CityCreateOrConnectWithoutUsersInput1
  upsert: CityUpsertWithoutUsersInput1
  connect: CityWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: CityUpdateWithoutUsersInput1
}

input CityUpsertWithoutUsersInput1 {
  update: CityUpdateWithoutUsersInput1!
  create: CityCreateWithoutUsersInput1!
}

input CityUpdateWithoutUsersInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  products: ProductUpdateManyWithoutCityInput1
}

input FavoriteUpdateManyWithoutUserInput1 {
  create: [FavoriteCreateWithoutUserInput1!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutUserInput1!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutUserInput1!]
  createMany: FavoriteCreateManyUserInputEnvelope1
  connect: [FavoriteWhereUniqueInput1!]
  set: [FavoriteWhereUniqueInput1!]
  disconnect: [FavoriteWhereUniqueInput1!]
  delete: [FavoriteWhereUniqueInput1!]
  update: [FavoriteUpdateWithWhereUniqueWithoutUserInput1!]
  updateMany: [FavoriteUpdateManyWithWhereWithoutUserInput1!]
  deleteMany: [FavoriteScalarWhereInput1!]
}

input FavoriteUpsertWithWhereUniqueWithoutUserInput1 {
  where: FavoriteWhereUniqueInput1!
  update: FavoriteUpdateWithoutUserInput1!
  create: FavoriteCreateWithoutUserInput1!
}

input FavoriteUpdateWithoutUserInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  product: ProductUpdateOneWithoutFavoritesInput1
}

input ProductUpdateOneWithoutFavoritesInput1 {
  create: ProductCreateWithoutFavoritesInput1
  connectOrCreate: ProductCreateOrConnectWithoutFavoritesInput1
  upsert: ProductUpsertWithoutFavoritesInput1
  connect: ProductWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutFavoritesInput1
}

input ProductUpsertWithoutFavoritesInput1 {
  update: ProductUpdateWithoutFavoritesInput1!
  create: ProductCreateWithoutFavoritesInput1!
}

input ProductUpdateWithoutFavoritesInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  likes: LikeUpdateManyWithoutProductInput1
}

input CityUpdateOneRequiredWithoutProductsInput1 {
  create: CityCreateWithoutProductsInput1
  connectOrCreate: CityCreateOrConnectWithoutProductsInput1
  upsert: CityUpsertWithoutProductsInput1
  connect: CityWhereUniqueInput1
  update: CityUpdateWithoutProductsInput1
}

input CityUpsertWithoutProductsInput1 {
  update: CityUpdateWithoutProductsInput1!
  create: CityCreateWithoutProductsInput1!
}

input CityUpdateWithoutProductsInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  users: UserUpdateManyWithoutCityInput1
}

input UserUpdateManyWithoutCityInput1 {
  create: [UserCreateWithoutCityInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutCityInput1!]
  upsert: [UserUpsertWithWhereUniqueWithoutCityInput1!]
  createMany: UserCreateManyCityInputEnvelope1
  connect: [UserWhereUniqueInput1!]
  set: [UserWhereUniqueInput1!]
  disconnect: [UserWhereUniqueInput1!]
  delete: [UserWhereUniqueInput1!]
  update: [UserUpdateWithWhereUniqueWithoutCityInput1!]
  updateMany: [UserUpdateManyWithWhereWithoutCityInput1!]
  deleteMany: [UserScalarWhereInput1!]
}

input UserUpsertWithWhereUniqueWithoutCityInput1 {
  where: UserWhereUniqueInput1!
  update: UserUpdateWithoutCityInput1!
  create: UserCreateWithoutCityInput1!
}

input UserUpdateWithoutCityInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  products: ProductUpdateManyWithoutAuthorInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  likes: LikeUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input ProductUpdateManyWithoutAuthorInput1 {
  create: [ProductCreateWithoutAuthorInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutAuthorInput1!]
  upsert: [ProductUpsertWithWhereUniqueWithoutAuthorInput1!]
  createMany: ProductCreateManyAuthorInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
  set: [ProductWhereUniqueInput1!]
  disconnect: [ProductWhereUniqueInput1!]
  delete: [ProductWhereUniqueInput1!]
  update: [ProductUpdateWithWhereUniqueWithoutAuthorInput1!]
  updateMany: [ProductUpdateManyWithWhereWithoutAuthorInput1!]
  deleteMany: [ProductScalarWhereInput1!]
}

input ProductUpsertWithWhereUniqueWithoutAuthorInput1 {
  where: ProductWhereUniqueInput1!
  update: ProductUpdateWithoutAuthorInput1!
  create: ProductCreateWithoutAuthorInput1!
}

input ProductUpdateWithoutAuthorInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
  likes: LikeUpdateManyWithoutProductInput1
}

input FavoriteUpdateManyWithoutProductInput1 {
  create: [FavoriteCreateWithoutProductInput1!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutProductInput1!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutProductInput1!]
  createMany: FavoriteCreateManyProductInputEnvelope1
  connect: [FavoriteWhereUniqueInput1!]
  set: [FavoriteWhereUniqueInput1!]
  disconnect: [FavoriteWhereUniqueInput1!]
  delete: [FavoriteWhereUniqueInput1!]
  update: [FavoriteUpdateWithWhereUniqueWithoutProductInput1!]
  updateMany: [FavoriteUpdateManyWithWhereWithoutProductInput1!]
  deleteMany: [FavoriteScalarWhereInput1!]
}

input FavoriteUpsertWithWhereUniqueWithoutProductInput1 {
  where: FavoriteWhereUniqueInput1!
  update: FavoriteUpdateWithoutProductInput1!
  create: FavoriteCreateWithoutProductInput1!
}

input FavoriteUpdateWithoutProductInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  user: UserUpdateOneWithoutFavoritesInput1
}

input UserUpdateOneWithoutFavoritesInput1 {
  create: UserCreateWithoutFavoritesInput1
  connectOrCreate: UserCreateOrConnectWithoutFavoritesInput1
  upsert: UserUpsertWithoutFavoritesInput1
  connect: UserWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFavoritesInput1
}

input UserUpsertWithoutFavoritesInput1 {
  update: UserUpdateWithoutFavoritesInput1!
  create: UserCreateWithoutFavoritesInput1!
}

input UserUpdateWithoutFavoritesInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  products: ProductUpdateManyWithoutAuthorInput1
  likes: LikeUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input LikeUpdateManyWithoutUserInput1 {
  create: [LikeCreateWithoutUserInput1!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput1!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput1!]
  createMany: LikeCreateManyUserInputEnvelope1
  connect: [LikeWhereUniqueInput1!]
  set: [LikeWhereUniqueInput1!]
  disconnect: [LikeWhereUniqueInput1!]
  delete: [LikeWhereUniqueInput1!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput1!]
  updateMany: [LikeUpdateManyWithWhereWithoutUserInput1!]
  deleteMany: [LikeScalarWhereInput1!]
}

input LikeUpsertWithWhereUniqueWithoutUserInput1 {
  where: LikeWhereUniqueInput1!
  update: LikeUpdateWithoutUserInput1!
  create: LikeCreateWithoutUserInput1!
}

input LikeUpdateWithoutUserInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  product: ProductUpdateOneWithoutLikesInput1
}

input ProductUpdateOneWithoutLikesInput1 {
  create: ProductCreateWithoutLikesInput1
  connectOrCreate: ProductCreateOrConnectWithoutLikesInput1
  upsert: ProductUpsertWithoutLikesInput1
  connect: ProductWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutLikesInput1
}

input ProductUpsertWithoutLikesInput1 {
  update: ProductUpdateWithoutLikesInput1!
  create: ProductCreateWithoutLikesInput1!
}

input ProductUpdateWithoutLikesInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
}

input LikeUpdateWithWhereUniqueWithoutUserInput1 {
  where: LikeWhereUniqueInput1!
  data: LikeUpdateWithoutUserInput1!
}

input LikeUpdateManyWithWhereWithoutUserInput1 {
  where: LikeScalarWhereInput1!
  data: LikeUpdateManyMutationInput1!
}

input LikeScalarWhereInput1 {
  AND: [LikeScalarWhereInput1!]
  OR: [LikeScalarWhereInput1!]
  NOT: [LikeScalarWhereInput1!]
  id: StringFilter1
  userId: StringNullableFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input LikeUpdateManyMutationInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input UserUpdateManyWithoutFollowingInput1 {
  create: [UserCreateWithoutFollowingInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput1!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput1!]
  connect: [UserWhereUniqueInput1!]
  set: [UserWhereUniqueInput1!]
  disconnect: [UserWhereUniqueInput1!]
  delete: [UserWhereUniqueInput1!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput1!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowingInput1!]
  deleteMany: [UserScalarWhereInput1!]
}

input UserUpsertWithWhereUniqueWithoutFollowingInput1 {
  where: UserWhereUniqueInput1!
  update: UserUpdateWithoutFollowingInput1!
  create: UserCreateWithoutFollowingInput1!
}

input UserUpdateWithoutFollowingInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  products: ProductUpdateManyWithoutAuthorInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  likes: LikeUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
}

input UserUpdateWithWhereUniqueWithoutFollowingInput1 {
  where: UserWhereUniqueInput1!
  data: UserUpdateWithoutFollowingInput1!
}

input UserUpdateManyWithWhereWithoutFollowingInput1 {
  where: UserScalarWhereInput1!
  data: UserUpdateManyMutationInput1!
}

input UserScalarWhereInput1 {
  AND: [UserScalarWhereInput1!]
  OR: [UserScalarWhereInput1!]
  NOT: [UserScalarWhereInput1!]
  id: StringFilter1
  email: StringFilter1
  password: StringFilter1
  firstName: StringFilter1
  lastName: StringFilter1
  avatar: StringNullableFilter1
  phoneNumber: StringFilter1
  showPhoneNumber: BoolFilter1
  role: EnumUserRoleFilter1
  status: EnumUserStatusFilter1
  googleId: StringNullableFilter1
  facebookId: StringNullableFilter1
  cityId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input UserUpdateManyMutationInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input UserUpdateManyWithoutFollowedByInput1 {
  create: [UserCreateWithoutFollowedByInput1!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowedByInput1!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedByInput1!]
  connect: [UserWhereUniqueInput1!]
  set: [UserWhereUniqueInput1!]
  disconnect: [UserWhereUniqueInput1!]
  delete: [UserWhereUniqueInput1!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedByInput1!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowedByInput1!]
  deleteMany: [UserScalarWhereInput1!]
}

input UserUpsertWithWhereUniqueWithoutFollowedByInput1 {
  where: UserWhereUniqueInput1!
  update: UserUpdateWithoutFollowedByInput1!
  create: UserCreateWithoutFollowedByInput1!
}

input UserUpdateWithoutFollowedByInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  products: ProductUpdateManyWithoutAuthorInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  likes: LikeUpdateManyWithoutUserInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input UserUpdateWithWhereUniqueWithoutFollowedByInput1 {
  where: UserWhereUniqueInput1!
  data: UserUpdateWithoutFollowedByInput1!
}

input UserUpdateManyWithWhereWithoutFollowedByInput1 {
  where: UserScalarWhereInput1!
  data: UserUpdateManyMutationInput1!
}

input FavoriteUpdateWithWhereUniqueWithoutProductInput1 {
  where: FavoriteWhereUniqueInput1!
  data: FavoriteUpdateWithoutProductInput1!
}

input FavoriteUpdateManyWithWhereWithoutProductInput1 {
  where: FavoriteScalarWhereInput1!
  data: FavoriteUpdateManyMutationInput1!
}

input FavoriteScalarWhereInput1 {
  AND: [FavoriteScalarWhereInput1!]
  OR: [FavoriteScalarWhereInput1!]
  NOT: [FavoriteScalarWhereInput1!]
  id: StringFilter1
  userId: StringNullableFilter1
  productId: StringNullableFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input FavoriteUpdateManyMutationInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input LikeUpdateManyWithoutProductInput1 {
  create: [LikeCreateWithoutProductInput1!]
  connectOrCreate: [LikeCreateOrConnectWithoutProductInput1!]
  upsert: [LikeUpsertWithWhereUniqueWithoutProductInput1!]
  createMany: LikeCreateManyProductInputEnvelope1
  connect: [LikeWhereUniqueInput1!]
  set: [LikeWhereUniqueInput1!]
  disconnect: [LikeWhereUniqueInput1!]
  delete: [LikeWhereUniqueInput1!]
  update: [LikeUpdateWithWhereUniqueWithoutProductInput1!]
  updateMany: [LikeUpdateManyWithWhereWithoutProductInput1!]
  deleteMany: [LikeScalarWhereInput1!]
}

input LikeUpsertWithWhereUniqueWithoutProductInput1 {
  where: LikeWhereUniqueInput1!
  update: LikeUpdateWithoutProductInput1!
  create: LikeCreateWithoutProductInput1!
}

input LikeUpdateWithoutProductInput1 {
  id: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  user: UserUpdateOneWithoutLikesInput1
}

input UserUpdateOneWithoutLikesInput1 {
  create: UserCreateWithoutLikesInput1
  connectOrCreate: UserCreateOrConnectWithoutLikesInput1
  upsert: UserUpsertWithoutLikesInput1
  connect: UserWhereUniqueInput1
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLikesInput1
}

input UserUpsertWithoutLikesInput1 {
  update: UserUpdateWithoutLikesInput1!
  create: UserCreateWithoutLikesInput1!
}

input UserUpdateWithoutLikesInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  products: ProductUpdateManyWithoutAuthorInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input LikeUpdateWithWhereUniqueWithoutProductInput1 {
  where: LikeWhereUniqueInput1!
  data: LikeUpdateWithoutProductInput1!
}

input LikeUpdateManyWithWhereWithoutProductInput1 {
  where: LikeScalarWhereInput1!
  data: LikeUpdateManyMutationInput1!
}

input ProductUpdateWithWhereUniqueWithoutAuthorInput1 {
  where: ProductWhereUniqueInput1!
  data: ProductUpdateWithoutAuthorInput1!
}

input ProductUpdateManyWithWhereWithoutAuthorInput1 {
  where: ProductScalarWhereInput1!
  data: ProductUpdateManyMutationInput1!
}

input ProductScalarWhereInput1 {
  AND: [ProductScalarWhereInput1!]
  OR: [ProductScalarWhereInput1!]
  NOT: [ProductScalarWhereInput1!]
  id: StringFilter1
  title: StringFilter1
  desc: StringFilter1
  price: FloatFilter1
  size: EnumProductSizeFilter1
  season: EnumProductSeasonFilter1
  dateOfPurchase: DateTimeFilter1
  viewsNumber: IntFilter1
  cityId: StringFilter1
  categoryId: StringFilter1
  brandId: StringFilter1
  authorId: StringNullableFilter1
  publishStatus: EnumProductPublishStatusFilter1
  productStatus: EnumProductStatusFilter1
  createdAt: DateTimeFilter1
  updatedAt: DateTimeFilter1
}

input ProductUpdateManyMutationInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
}

input UserUpdateWithWhereUniqueWithoutCityInput1 {
  where: UserWhereUniqueInput1!
  data: UserUpdateWithoutCityInput1!
}

input UserUpdateManyWithWhereWithoutCityInput1 {
  where: UserScalarWhereInput1!
  data: UserUpdateManyMutationInput1!
}

input FavoriteUpdateWithWhereUniqueWithoutUserInput1 {
  where: FavoriteWhereUniqueInput1!
  data: FavoriteUpdateWithoutUserInput1!
}

input FavoriteUpdateManyWithWhereWithoutUserInput1 {
  where: FavoriteScalarWhereInput1!
  data: FavoriteUpdateManyMutationInput1!
}

input ProductUpdateWithWhereUniqueWithoutCityInput1 {
  where: ProductWhereUniqueInput1!
  data: ProductUpdateWithoutCityInput1!
}

input ProductUpdateManyWithWhereWithoutCityInput1 {
  where: ProductScalarWhereInput1!
  data: ProductUpdateManyMutationInput1!
}

input BrandCreateInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutBrandInput1
}

input ProductCreateNestedManyWithoutBrandInput1 {
  create: [ProductCreateWithoutBrandInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutBrandInput1!]
  createMany: ProductCreateManyBrandInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
}

input ProductCreateWithoutBrandInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  category: CategoryCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  favorites: FavoriteCreateNestedManyWithoutProductInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input ProductCreateOrConnectWithoutBrandInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutBrandInput1!
}

input ProductCreateManyBrandInputEnvelope1 {
  data: [ProductCreateManyBrandInput1!]!
  skipDuplicates: Boolean
}

input ProductCreateManyBrandInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  cityId: String!
  categoryId: String!
  authorId: String
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input BrandUpdateInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  products: ProductUpdateManyWithoutBrandInput1
}

input ProductUpdateManyWithoutBrandInput1 {
  create: [ProductCreateWithoutBrandInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutBrandInput1!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput1!]
  createMany: ProductCreateManyBrandInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
  set: [ProductWhereUniqueInput1!]
  disconnect: [ProductWhereUniqueInput1!]
  delete: [ProductWhereUniqueInput1!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput1!]
  updateMany: [ProductUpdateManyWithWhereWithoutBrandInput1!]
  deleteMany: [ProductScalarWhereInput1!]
}

input ProductUpsertWithWhereUniqueWithoutBrandInput1 {
  where: ProductWhereUniqueInput1!
  update: ProductUpdateWithoutBrandInput1!
  create: ProductCreateWithoutBrandInput1!
}

input ProductUpdateWithoutBrandInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
  likes: LikeUpdateManyWithoutProductInput1
}

input ProductUpdateWithWhereUniqueWithoutBrandInput1 {
  where: ProductWhereUniqueInput1!
  data: ProductUpdateWithoutBrandInput1!
}

input ProductUpdateManyWithWhereWithoutBrandInput1 {
  where: ProductScalarWhereInput1!
  data: ProductUpdateManyMutationInput1!
}

input CategoryCreateInput1 {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  products: ProductCreateNestedManyWithoutCategoryInput1
}

input ProductCreateNestedManyWithoutCategoryInput1 {
  create: [ProductCreateWithoutCategoryInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput1!]
  createMany: ProductCreateManyCategoryInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
}

input ProductCreateWithoutCategoryInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  favorites: FavoriteCreateNestedManyWithoutProductInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input ProductCreateOrConnectWithoutCategoryInput1 {
  where: ProductWhereUniqueInput1!
  create: ProductCreateWithoutCategoryInput1!
}

input ProductCreateManyCategoryInputEnvelope1 {
  data: [ProductCreateManyCategoryInput1!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCategoryInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  cityId: String!
  brandId: String!
  authorId: String
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryUpdateInput1 {
  id: StringFieldUpdateOperationsInput1
  name: StringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  products: ProductUpdateManyWithoutCategoryInput1
}

input ProductUpdateManyWithoutCategoryInput1 {
  create: [ProductCreateWithoutCategoryInput1!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput1!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput1!]
  createMany: ProductCreateManyCategoryInputEnvelope1
  connect: [ProductWhereUniqueInput1!]
  set: [ProductWhereUniqueInput1!]
  disconnect: [ProductWhereUniqueInput1!]
  delete: [ProductWhereUniqueInput1!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput1!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoryInput1!]
  deleteMany: [ProductScalarWhereInput1!]
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput1 {
  where: ProductWhereUniqueInput1!
  update: ProductUpdateWithoutCategoryInput1!
  create: ProductCreateWithoutCategoryInput1!
}

input ProductUpdateWithoutCategoryInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
  likes: LikeUpdateManyWithoutProductInput1
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput1 {
  where: ProductWhereUniqueInput1!
  data: ProductUpdateWithoutCategoryInput1!
}

input ProductUpdateManyWithWhereWithoutCategoryInput1 {
  where: ProductScalarWhereInput1!
  data: ProductUpdateManyMutationInput1!
}

input RegisterInput1 {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input LoginInput1 {
  email: String!
  password: String!
}

input UpdateUserInput1 {
  where: UserWhereUniqueInput1!
  data: UserUpdateInput1!
}

input UserUpdateInput1 {
  id: StringFieldUpdateOperationsInput1
  email: StringFieldUpdateOperationsInput1
  password: StringFieldUpdateOperationsInput1
  firstName: StringFieldUpdateOperationsInput1
  lastName: StringFieldUpdateOperationsInput1
  avatar: NullableStringFieldUpdateOperationsInput1
  phoneNumber: StringFieldUpdateOperationsInput1
  showPhoneNumber: BoolFieldUpdateOperationsInput1
  role: EnumUserRoleFieldUpdateOperationsInput1
  status: EnumUserStatusFieldUpdateOperationsInput1
  googleId: NullableStringFieldUpdateOperationsInput1
  facebookId: NullableStringFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  city: CityUpdateOneWithoutUsersInput1
  products: ProductUpdateManyWithoutAuthorInput1
  favorites: FavoriteUpdateManyWithoutUserInput1
  likes: LikeUpdateManyWithoutUserInput1
  followedBy: UserUpdateManyWithoutFollowingInput1
  following: UserUpdateManyWithoutFollowedByInput1
}

input ChangePasswordInput1 {
  oldPassword: String!
  newPassword: String!
}

input ProductCreateInput1 {
  id: String
  title: String!
  desc: String!
  price: Float!
  size: ProductSize!
  season: ProductSeason!
  dateOfPurchase: DateTime!
  viewsNumber: Int!
  publishStatus: ProductPublishStatus!
  productStatus: ProductStatus!
  createdAt: DateTime
  updatedAt: DateTime
  images: ProductImageCreateNestedManyWithoutProductInput1
  city: CityCreateNestedOneWithoutProductsInput1!
  category: CategoryCreateNestedOneWithoutProductsInput1!
  brand: BrandCreateNestedOneWithoutProductsInput1!
  author: UserCreateNestedOneWithoutProductsInput1
  favorites: FavoriteCreateNestedManyWithoutProductInput1
  likes: LikeCreateNestedManyWithoutProductInput1
}

input ProductUpdateInput1 {
  id: StringFieldUpdateOperationsInput1
  title: StringFieldUpdateOperationsInput1
  desc: StringFieldUpdateOperationsInput1
  price: FloatFieldUpdateOperationsInput1
  size: EnumProductSizeFieldUpdateOperationsInput1
  season: EnumProductSeasonFieldUpdateOperationsInput1
  dateOfPurchase: DateTimeFieldUpdateOperationsInput1
  viewsNumber: IntFieldUpdateOperationsInput1
  publishStatus: EnumProductPublishStatusFieldUpdateOperationsInput1
  productStatus: EnumProductStatusFieldUpdateOperationsInput1
  createdAt: DateTimeFieldUpdateOperationsInput1
  updatedAt: DateTimeFieldUpdateOperationsInput1
  images: ProductImageUpdateManyWithoutProductInput1
  city: CityUpdateOneRequiredWithoutProductsInput1
  category: CategoryUpdateOneRequiredWithoutProductsInput1
  brand: BrandUpdateOneRequiredWithoutProductsInput1
  author: UserUpdateOneWithoutProductsInput1
  favorites: FavoriteUpdateManyWithoutProductInput1
  likes: LikeUpdateManyWithoutProductInput1
}
